#!/usr/bin/env python3
"""
flashcard_console_with_progress.py

Run the flashcards generated by generate_flashcards_from_pdf() and keep
persistent learning‑progress statistics.
"""
from __future__ import annotations

import json
import os
import sys
from datetime import datetime
from typing import Any, Dict, List

PROGRESS_PATH = "progress.json"

# ──────────────────────────── Flashcard loading ──────────────────────────────

def load_flashcard_data(json_path: str) -> Dict[str, Any]:
    """Read a JSON file with flashcards + metadata and return the dict."""
    if not os.path.exists(json_path):
        print(f"ERROR: Could not find {json_path}", file=sys.stderr)
        sys.exit(1)

    with open(json_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    flashcards = data.get("flashcards")
    if not isinstance(flashcards, list) or not flashcards:
        print("ERROR: JSON must contain a non-empty 'flashcards' list.", file=sys.stderr)
        sys.exit(1)
    return data


# ───────────────────────────── Quiz interaction ──────────────────────────────

def run_console_flashcards(flashcards: List[Dict[str, str]]) -> List[Dict[str, str | int]]:
    """Simple console UI to walk through Q‑A cards and collect ratings."""
    studied_cards: List[Dict[str, str | int]] = []
    total = len(flashcards)

    print("\n=== Flashcard Review ===\n")
    print("Instructions:")
    print("  1) Read the question.")
    print("  2) Press ENTER to reveal the answer.")
    print("  3) Rate the card [1=Easy, 2=Medium, 3=Hard].")
    print("  4) Press ENTER to continue.\n")

    for idx, card in enumerate(flashcards, start=1):
        question = card["question"]
        answer = card["answer"]

        print(f"Card {idx}/{total}")
        print("-" * 40)
        print("Q:", question)
        input("\nPress ENTER to show the answer…")

        print("\nA:", answer)
        while True:
            rating_str = input("\nRate [1=Easy,2=Medium,3=Hard]: ").strip()
            if rating_str in {"1", "2", "3"}:
                rating = int(rating_str)
                break
            print("Invalid input – please type 1, 2, or 3.")

        studied_cards.append({"question": question, "answer": answer, "rating": rating})
        print("\n" + ("=" * 40) + "\n")

    return studied_cards


# ───────────────────────────── Progress helpers ──────────────────────────────

def _load_progress(path: str = PROGRESS_PATH) -> dict:
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


def _save_progress(progress: dict, path: str = PROGRESS_PATH) -> None:
    with open(path, "w", encoding="utf-8") as f:
        json.dump(progress, f, indent=2, ensure_ascii=False)


def update_progress(
    learning_goal: str,
    session_results: List[Dict[str, str | int]],
    *,
    timestamp: str | None = None,
    path: str = PROGRESS_PATH,
) -> None:
    """Merge one quiz session into the persistent progress file."""
    progress = _load_progress(path)
    goal_block = progress.setdefault(learning_goal, {})

    for entry in session_results:
        q, a, r = entry["question"], entry["answer"], entry["rating"]
        stats = goal_block.setdefault(q, {"answer": a, "repetitions": 0, "ratings": []})
        stats["repetitions"] += 1
        stats["ratings"].append(r)
        stats["avg_rating"] = round(sum(stats["ratings"]) / len(stats["ratings"]), 2)

    if timestamp:
        goal_block.setdefault("_sessions", []).append(timestamp)

    _save_progress(progress, path)


def print_goal_progress(learning_goal: str, path: str = PROGRESS_PATH) -> None:
    """Pretty‑print aggregated stats for one learning goal."""
    progress = _load_progress(path)
    goal_block = progress.get(learning_goal)
    if not goal_block:
        print("\n(No previous progress recorded.)")
        return

    print(f"\n=== Aggregated Progress – {learning_goal} ===")
    idx = 1
    for q, stats in goal_block.items():
        if q.startswith("_"):
            continue  # skip internal keys
        print(f"{idx}. Q: {q}")
        print(f"   A: {stats['answer']}")
        print(f"   Repetitions: {stats['repetitions']}")
        print(f"   Ratings: {stats['ratings']}")
        print(f"   Avg rating: {stats['avg_rating']}")
        print("-" * 40)
        idx += 1


# ────────────────────────────────── main() ────────────────────────────────────

def main() -> None:
    """Entry‑point when run as a script."""
    json_path = "flashcards/calcitriol_flashcards.json"
    if len(sys.argv) > 1:
        json_path = sys.argv[1]

    data = load_flashcard_data(json_path)
    flashcards = data["flashcards"]
    learning_goal = data.get("learning_goal", "Unknown goal")

    print(f"\nLearning goal: {learning_goal}\n")
    results = run_console_flashcards(flashcards)

    timestamp = datetime.now().isoformat(timespec="seconds")
    update_progress(learning_goal, results, timestamp=timestamp)

    print("\n=== Study Session Complete ===")
    for i, entry in enumerate(results, 1):
        print(f"{i}. Q: {entry['question']}")
        print(f"   A: {entry['answer']}")
        print(f"   Rating: {entry['rating']}")
        print("-" * 40)

    print_goal_progress(learning_goal)


if __name__ == "__main__":
    main()
